/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export function sum(a: number, b: number): number
/** A wrapper around `ImageWrapper` that can be exposed to JavaScript */
export class CommonImage {
  /** Encode this image as a PNG and return the encoded bytes */
  toPng(): Array<number>
  /**
   * Encode this image as a JPEG(with specified quality) and return the encoded bytes
   *
   * ---
   * `quality`: Valid within `1-100` and should be a `u8`, otherwise it will cause a panic
   */
  toJpeg(quality: number): Array<number>
  /**
   * Encode this image as a PNM(in variant PBM) and return the encoded bytes
   *
   * ---
   * `binary_sample`: whether to use binary sample encoding, otherwise it will use ascii sample encoding. default is `true` for smaller size
   */
  toPbm(binarySample?: boolean | undefined | null): Array<number>
  /**
   * Encode this image as a PNM(in variant PGM) and return the encoded bytes
   *
   * ---
   * `binary_sample`: whether to use binary sample encoding, otherwise it will use ascii sample encoding. default is `true` for smaller size
   */
  toPgm(binarySample?: boolean | undefined | null): Array<number>
  /**
   * Encode this image as a PNM(in variant PPM) and return the encoded bytes
   *
   * ---
   * `binary_sample`: whether to use binary sample encoding, otherwise it will use ascii sample encoding. default is `true` for smaller size
   */
  toPpm(binarySample?: boolean | undefined | null): Array<number>
  /** Encode this image as a PNM(extended as PAM) and return the encoded bytes */
  toPam(): Array<number>
  /** Encode this image as a GIF and return the encoded bytes */
  toGif(): Array<number>
  /** Encode this image as a ICO and return the encoded bytes */
  toIco(): Array<number>
  /** Encode this image as a BMP and return the encoded bytes */
  toBmp(): Array<number>
  /** Encode this image as a Farbfeld and return the encoded bytes */
  toFarbfeld(): Array<number>
  /** Encode this image as a TGA and return the encoded bytes */
  toTga(): Array<number>
  /** Encode this image as a OpenExr and return the encoded bytes */
  toOpenExr(): Array<number>
  /** Encode this image as a TIFF and return the encoded bytes */
  toTiff(): Array<number>
  /** Encode this image as a QOI and return the encoded bytes */
  toQoi(): Array<number>
}
/** `ImageLoader` provides several way to load image binary into a `CommonImage` */
export class ImageLoader {
  /** Create a `CommonImage` instance from a byte slice. Makes an educated guess about the image format */
  static autoGuess(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a PNG */
  static fromPng(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a JPEG */
  static fromJpeg(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a GIF */
  static fromGif(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a WEBP */
  static fromWebp(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a PNM */
  static fromPnm(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a TIFF */
  static fromTiff(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a TGA */
  static fromTga(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a DDS */
  static fromDds(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a BMP */
  static fromBmp(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a ICO */
  static fromIco(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a Radiance HDR */
  static fromHdr(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a OpenEXR */
  static fromOpenEXR(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a Farbfeld */
  static fromFarbfeld(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a AVIF */
  static fromAvif(buffer: Array<number>): CommonImage
  /** Create a `CommonImage` instance from a byte slice. Assumes the image is a QOI */
  static fromQoi(buffer: Array<number>): CommonImage
}
